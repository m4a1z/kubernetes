1강 컨테이터 오케스트레이션이란?


서버의 상태를 관리하기 위한 노력이 시작 되었다.

첫번째 문서관리를 잘해보자!
    L 따라해도 잘안돼서 문서화해도 관리가 힘들었다
두번째 CHEF , puppet ANSIBLE 으로 관리! [문서보다 코드]
    L 기존 설치된거랑 충돌나거나 한서버에서 여러버전을 돌릴대 이슈가 많았다.
세번째 서버 하나에 가상머신 여러개 사용하는 방법으로
    L 멀티 클라우드 환경에서 사용이 어렵고 서버가 좀 느리다.
네번째 docker 모든 실행환경을 컨테이로 어디서든 동작하고 쉽고 효율적으로 동작 [도커 컨테이너]
    L docker 컨테이너가 답이다.!!!!!
    
컨테이너의 특징
- 가상머신과 비교하여 컨테이너 생성이 쉽고 효율적
- 컨테이너 이미지를 이용한 배포와 롤백이 간단
- 언어나 프레임워크에 상관없이 어플리케이션을 동일한 방식으로 관리
- 개발 , 테스트, 운영 환경은 물론 로컬 PC와 클라우드까지 동일한 환경을 구축
- 특정 클라우드에 벤더에 종속적이지 않음
- 컨테이너는 오픈 소스임!
- 모든 프로그램을 도커 컨테이너로 관리하게 된다 이런 용어는 🐬containerization🐬


도커를 만드는 방법
1. 개발자가 코드작성
2. Build (도커 이미지 만드는 방법)
3. Ship (dockerHub 나 저장소로 이동)
4. Run (저장소에서 실행)

모든 프로그램은 이런식으로 도커 이미지를 만들어서 정형화 시킨다.!


Deployment
1. 배포는 어떻게 할까?
- 여러 서버일때 배포와 롤백이 어려움이 있었다.

Service Discovery
2. 서비스 검색은 어떻게 할까?
- 로드밸런스를 두고 부하를 분산 하게 되었는데 마이크로서비스때문에 서버가 많아진다.

GateWay
3. 서비스 노출은 어떻게 할까?
- 퍼블릭 영역에 엔진엑스 같은 서비스를 두고 private 로 연결
- private 영역에 서버가 늘어나면 설정을 바꾸게 되야한다

4. 서비스에 이상이 생기거나 부하가 생기면 어떻게 처리해야 할까?
- 자동화로 살려야 하는 방법이 필요하게 되었다.

많은 컨테이너 
